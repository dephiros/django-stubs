from collections.abc import Callable, Iterable
from typing import TypeVar

from django.http.response import HttpResponseBase
from django.utils.deprecation import MiddlewareMixin
from django.views.generic.base import View
from typing_extensions import TypeAlias

_T = TypeVar("_T", bound=View | Callable)  # Any callable
_CallableType = TypeVar("_CallableType", bound=Callable)
_VIEW = TypeVar("_VIEW", bound=Callable[..., HttpResponseBase])
_DECORATOR: TypeAlias = Callable[..., _VIEW | Callable[..., _VIEW]]

classonlymethod = classmethod

def method_decorator(decorator: _DECORATOR | Iterable[_DECORATOR], name: str = ...) -> Callable[[_T], _T]: ...
def decorator_from_middleware_with_args(middleware_class: type) -> Callable: ...
def decorator_from_middleware(middleware_class: type) -> Callable: ...
def make_middleware_decorator(middleware_class: type[MiddlewareMixin]) -> Callable: ...
def sync_and_async_middleware(func: _CallableType) -> _CallableType: ...
def sync_only_middleware(func: _CallableType) -> _CallableType: ...
def async_only_middleware(func: _CallableType) -> _CallableType: ...
